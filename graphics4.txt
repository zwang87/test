<include>
   pi = Math.PI;

   lerp(t,a,b) { return a + t * (b - a); }

   abs(t) { return Math.abs(t); }
   cos(t) { return Math.cos(t); }
   sin(t) { return Math.sin(t); }
   noise(x) { return Noise.noise(x); }
   noise(x,y) { return Noise.noise(x,y); }
   noise(x,y,z) { return Noise.noise(x,y,z); }

   fx = -100;
   fy = -100;

   mouseMove(x, y) {
      fx = draw.fx(x);
      fy = draw.fy(y);
   }

   px(x,y,z) { return (7 * x - 1.4 * z) / (10 - z); }
   py(x,y,z) { return (7 * y - 1.4 * z) / (10 - z); }

   X(u,v) { return px( x(u,v), y(u,v), z(u,v) ); }
   Y(u,v) { return py( x(u,v), y(u,v), z(u,v) ); }

   axesColor = Color.blue;
   veryLightGray = new Color(220,220,220);
   lightGray = new Color(160,160,160);

   draw2DAxes() {
      draw.setColor(axesColor);
      draw.fillThickLine(-1, 0, 1, 0, 0.01);
      draw.fillThickLine(0, -1, 0, 1, 0.01);
   }

   draw3DAxes() {
      draw.setColor(axesColor);
      draw.fillThickLine(-1, 0, 1, 0, 0.01);
      draw.fillThickLine(0, -1, 0, 1, 0.01);
      draw.fillThickLine(-.4, -.4, .4, .4, 0.01);
   }

   String round(double value) {
      String s = "" + ((int)(100 * value) / 100.);
      int i = s.indexOf('.');
      if (i < 0)
         return s + ".00";
      int n = s.length() - i;
      switch (n) {
      case  1: return s + "00";
      case  2: return s + "0";
      }
      return s;
   }
</include>
<center>
<b>MODELING SHAPES WITH POLYGONS</b>

<i><b>Modeling curved shapes with vertices and polygonal faces</b></i>
</center>

Because computers are better at solving simple problems, it is efficient to break any curved surface down into a collection of little flat surfaces.

<link #foo>This exploits the fact that people are much more sensitive to errors shading than to errors in</link> silhouettes.

As long as we can shade a flat polygon so that it reacts to light in a way that makes it look curved, we can get away with approximating curves surfaces by flat polygons.
<shift 10>

We can approximate any shape using the following two data structures:

<indent>
<i>An array of vertices:</i> Each vertex has an x,y,z coordinate.

<i>An array of faces:</i> Each face is an ordered array of vertex indices.
</indent>

Our represention needs to distinguish (1) adjoining faces that are being used to approximate a single curved surface from (2) adjoining faces that are supposed to have a visible edge between them.

To do this we will adopt the following convention:

<indent>
If two faces index into the <i>same</i> vertex, then this indicates a single smooth curved surface.

If two faces index into different vertices that just happen to have the same x,y,z position, this indicates a visible edge.
</indent>
<shift 10>

For example, the first example below is a coarse approximation to a smooth surface.  The second is an octahedron, with eight faces and twelve edges:
<figure>
<highlight edges=false> edges </highlight>
   Geometry shape;
   setup() {
//<block Material>
      Material material = new Material();
      material.setAmbient(0.2, 0.1, 0.1);
      material.setDiffuse(0.8, 0.4, 0.4);
//</block>
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.3);
      N = 3;
      shape = render.getWorld().add().mesh(N,N);
      shape.setMaterial(material);
      vertices = shape.vertices;
      for (int i = 0 ; i <= N ; i++)
      for (int j = 0 ; j <= N ; j++) {
         int n = i + (N + 1) * j;
         v = vertices[n];
         v[2] = .25 * (Math.sin(1.5 * i - .5) + Math.sin(1.5 * j - .5));
      }
      shape.computePolyhedronNormals();
   }
   update() {
      render.showMesh = edges;
      shape.getMatrix().identity().rotateX(-.7).rotateY(-.3);
   }
</figure><figure>
<button edges=0> edges | no edges </button>
<highlight explode=false> explode </highlight>
   Geometry shape;
   double[][] template = {
      { 0, 0,-1 ,0,0,0}, { 0,-1, 0 ,0,0,0}, {-1, 0, 0 ,0,0,0},
      { 1, 0, 0 ,0,0,0}, { 0,-1, 0 ,0,0,0}, { 0, 0,-1 ,0,0,0},
      {-1, 0, 0 ,0,0,0}, { 0, 1, 0 ,0,0,0}, { 0, 0,-1 ,0,0,0},
      { 0, 0,-1 ,0,0,0}, { 0, 1, 0 ,0,0,0}, { 1, 0, 0 ,0,0,0},
      {-1, 0, 0 ,0,0,0}, { 0,-1, 0 ,0,0,0}, { 0, 0, 1 ,0,0,0},
      { 0, 0, 1 ,0,0,0}, { 0,-1, 0 ,0,0,0}, { 1, 0, 0 ,0,0,0},
      { 0, 0, 1 ,0,0,0}, { 0, 1, 0 ,0,0,0}, {-1, 0, 0 ,0,0,0},
      { 1, 0, 0 ,0,0,0}, { 0, 1, 0 ,0,0,0}, { 0, 0, 1 ,0,0,0},
   };
   double[][] vertices = new double[template.length][6];
   int[][] faces = {
      {0,1,2}, {3,4,5}, {6,7,8}, {9,10,11},
      {12,13,14}, {15,16,17}, {18,19,20}, {21,22,23},
   };
   double[][] dv = {
      {-1,-1,-1},{1,-1,-1},{-1,1,-1},{1,1,-1},
      {-1,-1,1},{1,-1,1},{-1,1,1},{1,1,1},
   };
   setup() {
      for (int n = 0 ; n < vertices.length ; n++)
         for (int j = 0 ; j < vertices[n].length ; j++)
            vertices[n][j] = template[n][j];
      Material material = new Material();
      material.setDiffuse(0.2, 0.1, 0.1);
      material.setAmbient(0.8, 0.4, 0.4);
      material.setDoubleSided(true);
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.3);
      shape = render.getWorld().add();
      shape.faces = faces;
      shape.vertices = vertices;
      shape.setMaterial(material);
   }
   prevTime = 0;
   t = 0;
   update() {
      double s = 0.25 * explode();
      t += (1 + explode()) * (time - prevTime);
      prevTime = time;
      for (int n = 0 ; n < vertices.length ; n++)
         for (int j = 0 ; j < vertices[n].length ; j++) {
            vertices[n][j] = template[n][j];
            if (j < 3)
               vertices[n][j] += s * dv[n/3][j];
         }

      render.showMesh = edges == 1;
      shape.getMatrix().identity().rotateX(.3).rotateY(-.6 * t);
   }
</figure><indent>
<eval>double vertices[][] = { // 24 vertices
   { 0, 0,-1}, { 0,-1, 0}, {-1, 0, 0},
   { 1, 0, 0}, { 0,-1, 0}, { 0, 0,-1},
   {-1, 0, 0}, { 0, 1, 0}, { 0, 0,-1},
   { 0, 0,-1}, { 0, 1, 0}, { 1, 0, 0},
   {-1, 0, 0}, { 0,-1, 0}, { 0, 0, 1},
   { 0, 0, 1}, { 0,-1, 0}, { 1, 0, 0},
   { 0, 0, 1}, { 0, 1, 0}, {-1, 0, 0},
   { 1, 0, 0}, { 0, 1, 0}, { 0, 0, 1}, };
};
int faces[][] = {       // 8 faces
   {0,1,2},   {3,4,5},   {6,7,8},   {9,10,11},
   {12,13,14},{15,16,17},{18,19,20},{21,22,23},
};
</eval>
</indent>
<shift 10>

<a foo>
A unit cube can be described using this vertices/faces description as six faces and 24 vertices (four vertices for each of its six faces).  Because the cube contains edges between adjoining faces, the faces cannot share vertices.  Hence the need for 24 vertices, rather than 8.
<figure>
<highlight explode=false> explode </highlight>
   Geometry shape;
   prevTime = 0;
   t = 0.4;
   setup() {
      Material lighter = new Material();
      lighter.setDiffuse(0.2, 0.15, 0.1);
      lighter.setAmbient(0.8, 0.6, 0.4);

      Material darker = new Material();
      darker.setDiffuse(0.05, 0.0375, 0.025);
      darker.setAmbient(0.2, 0.15, 0.1);

      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.4);
      shape = render.getWorld().add();
      shape.setMaterial(lighter);
      for (int n = 0 ; n < 6 ; n++) {
         s = shape.add();
         s.add().cube().setMaterial(lighter).getMatrix().translate(0,0,.5).scale(1,1,.5);
         s.add().cube().setMaterial(darker).getMatrix().translate(0,0,-.5).scale(1,1,.5);
      }
   }
   update() {
      t += 1.2 * explode() * (time - prevTime);
      prevTime = time;

      r = 0.99 + 0.6 * explode();

      shape.child(0).getMatrix().identity().rotateY( Math.PI/2).translate(0,0,r).scale(1,1,.02);
      shape.child(1).getMatrix().identity().rotateY(-Math.PI/2).translate(0,0,r).scale(1,1,.02);
      shape.child(2).getMatrix().identity().rotateX( Math.PI/2).translate(0,0,r).scale(1,1,.02);
      shape.child(3).getMatrix().identity().rotateX(-Math.PI/2).translate(0,0,r).scale(1,1,.02);
      shape.child(4).getMatrix().identity().rotateX( Math.PI  ).translate(0,0,r).scale(1,1,.02);
      shape.child(5).getMatrix().identity().                    translate(0,0,r).scale(1,1,.02);

      shape.getMatrix().identity().rotateX(.3).rotateY(-t).scale(.9);
   }
</figure>

I leave it to you to figure out the vertices and faces arrays for a cube.  In fact, that's part of your homework assignment for this week.
<shift 10>

In general, you can create a Java class <code><big>Geometry</big></code> that contains these two data structures, together with your transform Matrix:
<eval>
   public class Geometry
   {
      double vertices[][];
      int faces[][];
      Matrix matrix;

      // OTHER CODE AND DATA GO HERE
   }
</eval>
To create different kinds of shapes, you can add methods to your Geometry class that fill in the vertices and faces values in various useful and interesting ways.




Next we will talk about <i><b>parametric shapes</b></i>.
<shift 10>


Before considering shapes created using two parameters, first let's look at curves created using one parameter.  Here is a circle as a parametric curve:

<indent>
<eval>
x(t) { return cos(2*pi*t); }
y(t) { return sin(2*pi*t); }
</eval>
</indent>

<figure>
<slider fraction=1.0> vary t </slider>
   N = 100;
   overlay() {
      X(t) { return .9 * x(t); }
      Y(t) { return .9 * y(t); }
      draw2DAxes();
      draw.setColor(Color.black);
/*
      src = evals.get(1);
      i = src.indexOf("cos");
      if (i > 0 && src.charAt(i-1) != '+') {
         foo = src.substring(0, i) + "1+" + src.substring(i, src.length());
         evals.set(1, foo);
      }
*/
      t1 = 0.0;
      for (int n = 0 ; n < (int)(N * fraction) ; n++) {
         t0 = (double) n    / N;
         t1 = (double)(n+1) / N;
         draw.fillThickLine(X(t0), Y(t0), X(t1), Y(t1), 0.02);
      }
      if (t1 < 1.0) {
         draw.fillThickLine(0, 0, X(0), Y(0), 0.01);
         draw.fillThickLine(0, 0, X(t1), Y(t1), 0.01);
         draw.fillDisk(X(t1), Y(t1), 0.04);

         draw.setColor(Color.white);
         draw.fillThickLine(-1,-.96,1,-.96,.05);
         draw.setColor(Color.red);
         draw.drawText("t=0",-1,-.82);
         draw.drawText("t=1", 1,-.82);
         draw.fillThickLine(-1,-.92,-1,-1,.01);
         draw.fillThickLine( 1,-.92, 1,-1,.01);
         draw.fillThickLine(-1,-.96,1,-.96,.01);
         draw.setColor(Color.black);
         x = lerp(t1,-1,1);
         draw.fillDisk(x,-.96,.04);
         draw.fillThickLine(-1,-.96,x,-.96,.02);
      }
   }
</figure>
<shift 10>

Similarly, some 3D shapes can be described parametrically.

As two parameters each vary from a minimum to a maximum value, we evaluate some function that returns the (x,y,z) coordinates of the point on the surface associated with those parameter values.

<figure>
   smallFont = new Font("Sanserif", Font.PLAIN, height / 16);
   bigFont = new Font("Sanserif", Font.BOLD, height / 13);

   x(u,v) { return .9 * (u + sin(1.5*v+.7)) + .10; }
   y(u,v) { return .9 * (v + cos(1.5*u-.7)) - 1.2; }
   z(u,v) { return 0; }

   draw() {
      draw.setFont(bigFont);
      draw.setColor(lightGray);
      draw.drawText("u,v plane",-.7,0);

      draw.setFont(smallFont);
      draw.setColor(Color.black);
      draw.drawBox(-.7,0,.4);
      draw.drawText("(0,0)",-1.1,-.5);
      draw.drawText("(1,0)",-0.3,-.5);
      draw.drawText("(0,1)",-1.1, .5);
      draw.drawText("(1,1)",-0.3, .5);
      draw.fillArrow(-.1,0,.3,0,.02);

      isDot = fx >= -1.1 && fx < -0.3 && fy >= -.4 && fy <= .4;
      u = 0;
      v = 0;

      if (isDot) {
         u = (fx + 1.1) / .8;
         v = (fy + .4) / .8;
         draw.setColor(Color.blue);
         draw.fillDisk(fx,fy,.03);
      }

      M = 8;
      N = 8;
      for (int n = 0 ; n < N ; n++) {
         for (int m = 0 ; m < M ; m++) {
            u0 = (double) m    / M;
            u1 = (double)(m+1) / M;
            v0 = (double) n    / N;
            v1 = (double)(n+1) / N;
            draw.setColor(veryLightGray);
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u1,v0), Y(u1,v0), 0.01);
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u0,v1), Y(u0,v1), 0.01);
            if (m == 0) {
               draw.setColor(Color.black);
               draw.fillThickLine(X(u0,v0),Y(u0,v0),X(u0,v1),Y(u0,v1),0.01);
            }
            if (n == 0) {
               draw.setColor(Color.black);
               draw.fillThickLine(X(u0,v0),Y(u0,v0),X(u1,v0),Y(u1,v0),0.01);
            }
            if (m == M - 1) {
               draw.setColor(Color.black);
               draw.fillThickLine(X(u1,v0),Y(u1,v0),X(u1,v1),Y(u1,v1),0.01);
            }
            if (n == N - 1) {
               draw.setColor(Color.black);
               draw.fillThickLine(X(u0,v1),Y(u0,v1),X(u1,v1),Y(u1,v1),0.01);
            }
         }
      }
      if (isDot) {
         draw.setColor(Color.red);
         draw.fillDisk(X(u,v), Y(u,v), .03);
      }
   }
</figure>
<shift 10>

One example of this is the description of a unit sphere as a latitude/longitude globe generated by two parameters.
<figure>
<button sphere=0> sphere | </button>
   smallFont = new Font("Sanserif", Font.PLAIN, height / 16);
   bigFont = new Font("Sanserif", Font.BOLD, height / 10);

   draw() {
      cx = -.7 * sphere(1);

      draw.setColor(veryLightGray);
      for (int m = 0 ; m < 7 ; m++)
      for (int n = 0 ; n < 7 ; n++) {
         x = 0.8 * (m - 3) / 7 + cx;
         y = 0.8 * (n - 3) / 7;
         draw.drawBox(x, y, .4 / 7);
      }

      draw.setColor(Color.gray);
      draw.setFont(bigFont);
      draw.drawText("u,v",cx,0);
      draw.setColor(Color.blue);
      if (sphere(0) < 0.1)
         draw.drawText("sphere",.75,0);

      draw.setColor(Color.black);
      if (sphere(0) < 0.1)
         draw.fillArrow(-.1,0,.3,0,.02);
      draw.setFont(smallFont);
      draw.drawBox(cx,0,.4);
      draw.drawText("(0,0)",-0.4+cx,-.5);
      draw.drawText("(1,0)", 0.4+cx,-.5);
      draw.drawText("(0,1)",-0.4+cx, .5);
      draw.drawText("(1,1)", 0.4+cx, .5);
   }
</figure>
<indent>
<b>u</b>  0 <le> u <le> 1      <b><rarr></b>       <b><theta></b>         0 <le> <theta> <le> 2<pi>        (Longitude)
<b>v</b>  0 <le> v <le> 1       <b><rarr></b>      <b><phi></b>    -<pi>/2 <le> <phi> <le> <pi>/2     (Latitude)
</indent>

with an associated parametric function.




<center>
<color blue><b>xyz(<theta>,<phi>) = (cos<theta> cos<phi> , sin<theta> cos<phi> , sin<phi>)</b></color>
</center>
<shift 12>

The parametric definition of a sphere requires mapping parameters <b>u</b>,<b>v</b> to <b>x</b>,<b>y</b>,<b>z</b>:

<indent>
<eval>
x(u,v) { return cos(2*pi*u) * cos(pi*(v-.5)); }
y(u,v) { return sin(2*pi*u) * cos(pi*(v-.5)); }
z(u,v) { return               sin(pi*(v-.5)); }
</eval>
</indent>

<figure>
<slider uFraction=1.0> vary u </slider>
<slider vFraction=1.0> vary v </slider>
   M = 20;
   N = 20;
   Color[] shade = new Color[N];
   for (int n = 0 ; n < N ; n++)
      shade[n] = new Color(0,0,0,n*255/N);
   overlay() {
      draw3DAxes();
      mm = (int)(M * uFraction);
      nn = (int)(N * vFraction);
      for (int n = 0 ; n < nn ; n++) {
         draw.setColor(shade[n]);
         for (int m = 0 ; m < mm ; m++) {
            u0 = (double) m    / M;
            u1 = (double)(m+1) / M;
            v0 = (double) n    / N;
            v1 = (double)(n+1) / N;
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u1,v0), Y(u1,v0), 0.01);
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u0,v1), Y(u0,v1), 0.01);
            if (m == mm - 1)
               draw.fillThickLine(X(u1,v0), Y(u1,v0), X(u1,v1), Y(u1,v1), 0.01);
            if (n == nn - 1)
               draw.fillThickLine(X(u0,v1), Y(u0,v1), X(u1,v1), Y(u1,v1), 0.01);
         }
      }
   }
</figure>
<shift 10>

Another example is the parametric description of a torus.
Let large radius <eval>R = 1.0</eval>, and small radius <eval>r = 0.20</eval>.

We can define two angular parameters <b><theta> = 2<pi>u</b> and <b><phi> = 2<pi>v</b>:

<indent>
<eval>
x(u,v) { return cos(2*pi*u) * (R + r * cos(2*pi*v)); }
y(u,v) { return sin(2*pi*u) * (R + r * cos(2*pi*v)); }
z(u,v) { return                    r * sin(2*pi*v) ; }
</eval>
</indent>

<figure name=torus>
<slider uFraction=1.0> vary u </slider>
<slider vFraction=1.0> vary v </slider>
   M = 30;
   N = 20;
   r = 0.2;
   R = 1.0;
   Color[] shade = new Color[N];
   for (int n = 0 ; n < N ; n++) {
      t = .6 + .4 * Math.sin(2 * Math.PI * (double)n / N);
      shade[n] = new Color(0,0,0,(int)(255*t));
   }
   overlay() {
      draw3DAxes();
      mm = (int)(M * uFraction);
      nn = (int)(N * vFraction);
      for (int n = 0 ; n < nn ; n++) {
         draw.setColor(shade[n]);
         for (int m = 0 ; m < mm ; m++) {
            u0 = (double) m    / M;
            u1 = (double)(m+1) / M;
            v0 = (double) n    / N;
            v1 = (double)(n+1) / N;
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u1,v0), Y(u1,v0), 0.01);
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u0,v1), Y(u0,v1), 0.01);
            if (m == mm - 1)
               draw.fillThickLine(X(u1,v0), Y(u1,v0), X(u1,v1), Y(u1,v1), 0.01);
            if (n == nn - 1)
               draw.fillThickLine(X(u0,v1), Y(u0,v1), X(u1,v1), Y(u1,v1), 0.01);
         }
      }
   }
</figure>
<shift 10>

We create a parametric shape as a rectangular mesh, with (M+1)<times>(N+1) vertices, and M<times>N faces, where each face indexes four vertices. Each vertex is indexed as follows:

<center>
<eval>i(m,n) = m + (M+1)*n</eval>
</center>

Each face is defined as follows:

<center>
<eval>face[m+M*n]={i(m,n),i(m+1,n),i(m+1,n+1),i(m,n+1)};</eval>
</center>
<TODO: on mouse-over, add arrows showing vertex order in face>
<figure>
<slider mFraction=0.5>vary M</slider>
<slider nFraction=0.5>vary N</slider>
   font = new Font("Sanserif", Font.BOLD, height / 15);
   x(m) { return 1.8*(m-(M-1)/2.)/(M-1) + .3; }
   y(n) { return 1.8*(n-(N-1)/2.)/(N-1); }
   M = 0;
   N = 0;
   draw() {
      draw.setFont(font);
      M = (int)lerp(mFraction, 2, 7);
      N = (int)lerp(nFraction, 2, 7);
      draw.setColor(Color.black);
      draw.drawText("M=" + (M-1), -1.1, 0.1);
      draw.drawText("N=" + (N-1), -1.1,-0.1);
      for (int n = 0 ; n < N ; n++)
      for (int m = 0 ; m < M ; m++) {
         if (m < M-1)
            draw.fillThickLine(x(m), y(n), x(m+1), y(n), 0.01);
         if (n < N-1)
            draw.fillThickLine(x(m), y(n), x(m), y(n+1), 0.01);
      }
      int i = 0;
      for (int n = 0 ; n < N ; n++)
      for (int m = 0 ; m < M ; m++) {
         draw.setColor(Color.white);
         draw.fillBox(x(m), y(n), .10, .09);
         draw.setColor(Color.black);
         draw.drawText("" + i, x(m), y(n));
         i++;
      }
      draw.setColor(Color.red);
      i = 0;
      for (int n = 0 ; n < N-1 ; n++)
      for (int m = 0 ; m < M-1 ; m++) {
         draw.drawText("" + i, (x(m)+x(m+1))/2,
                               (y(n)+y(n+1))/2);
         i++;
      }

      if (abs(fx-.3) < .2 && abs(fy) < .2) {
         draw.setColor(Color.pink);
         draw.fillArrow(.3-.15, -.2, .3+.15, -.2, .02);
         draw.fillArrow(.3+.2, -.15, .3+.2, +.15, .02);
         draw.fillArrow(.3+.15, .2, .3-.15, .2, .02);
         draw.fillArrow(.3-.2, +.15, .3-.2, -.15, .02);
      }
   }
</figure>




Note that the polygons are oriented <i>counterclockwise</i>.
<shift 10>

To implement a globe, you might implement a method

   <eval>globe(int m, int n)</eval>

within the Geometry class, which fills the geometry object's vertices and faces array with values that form the shape of a sphere.

   If there are M steps in longitude from 0 to 2<pi>,

   and N steps in latitude from -<pi>/2 to <pi>/2,

   then your globe will have M<times>N vertices and (M+1)<times>(N+1) faces.

<shift 16>

The tubular sides of a cylinder are parametrized by <b><theta></b> and <b>z</b>:

<indent>
<b>u      <rarr>      <theta></b>     0 <le> <theta> <le> 2<pi>           (around the cylinder)
<b>v      <rarr>      z</b>     -1 <le> z <le> 1            (along the cylinder)
</indent>

to create the mapping:  <b>xyz(<theta>,z) = ( cos<theta> , sin<theta> , z )</b>

<indent>
<eval>
x(u,v) { return cos(2*pi*u); }
y(u,v) { return sin(2*pi*u); }
z(u,v) { return     2*v-1  ; }
</eval>
</indent>

<figure>
<slider uFraction=1.0> vary u </slider>
<slider vFraction=1.0> vary v </slider>
   M = 30;
   N = 1;
   Color[] shade = new Color[N];
   for (int n = 0 ; n < N ; n++)
      shade[n] = new Color(0,0,0,64+n*(255-64)/N);
   overlay() {
      draw3DAxes();
      mm = (int)(M * uFraction);
      nn = (int)(N * vFraction);
      for (int n = 0 ; n < nn ; n++) {
         draw.setColor(Color.black);
         for (int m = 0 ; m < mm ; m++) {
            u0 = (double) m    / M;
            u1 = (double)(m+1) / M;
            v0 = (double) n    / N;
            v1 = (double)(n+1) / N;
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u1,v0), Y(u1,v0), 0.01);
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u0,v1), Y(u0,v1), 0.01);
            if (m == mm - 1)
               draw.fillThickLine(X(u1,v0), Y(u1,v0), X(u1,v1), Y(u1,v1), 0.01);
            if (n == nn - 1)
               draw.fillThickLine(X(u0,v1), Y(u0,v1), X(u1,v1), Y(u1,v1), 0.01);
         }
      }
      if (nn == 0) {
         draw.setColor(Color.black);
         for (int m = 0 ; m < mm ; m++) {
            u0 = (double) m    / M;
            u1 = (double)(m+1) / M;
            draw.fillThickLine(X(u0,0), Y(u0,0), X(u1,0), Y(u1,0), 0.01);
         }
      }
   }
</figure>
<shift 10>

The two end-caps can be parameterized by angle and radius:

<indent>
<b><theta></b>:       0 <le> <theta> <le> 2<pi>              (around the end cap)
<b>r</b>:        0 <le> r <le> 1                 (outward from the cap center)
</indent>

with the associated functions:

   xyz(<theta>,z) = ( r cos<theta> , r sin<theta> , 1.0 )                  (positive end cap)

   xyz(<theta>,z) = ( (1-r) cos<theta> , (1-r) sin<theta> , -1.0 )    (negative end cap)

<shift 12>

We can create the cylinder as a single mesh by putting the three parts together:

<indent>
<eval>
x(u,v) { return cos(2*pi*u)*r(v); }
y(u,v) { return sin(2*pi*u)*r(v); }
z(u,v) { return v < 0.5 ? -1 : 1; }
r(v) { return v==0||v==1 ? 0 : 1; }
</eval>
</indent>

<figure>
<slider uFraction=1.0> vary u </slider>
<slider vFraction=1.0> vary v </slider>
   M = 20;
   N = 3;
   Color[] shade = new Color[N];
   for (int n = 0 ; n < N ; n++)
      shade[n] = new Color(0,0,0,64+n*(255-64)/N);
   overlay() {
      draw3DAxes();
      mm = (int)(M * uFraction);
      nn = (int)(N * vFraction);
      for (int n = 0 ; n < nn ; n++) {
         draw.setColor(shade[n]);
         for (int m = 0 ; m < mm ; m++) {
            u0 = (double) m    / M;
            u1 = (double)(m+1) / M;
            v0 = (double) n    / N;
            v1 = (double)(n+1) / N;
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u1,v0), Y(u1,v0), 0.01);
            draw.fillThickLine(X(u0,v0), Y(u0,v0), X(u0,v1), Y(u0,v1), 0.01);
            if (mm < M - 1 && m == mm - 1)
               draw.fillThickLine(X(u1,v0), Y(u1,v0), X(u1,v1), Y(u1,v1), 0.01);
            if (n == nn - 1)
               draw.fillThickLine(X(u0,v1), Y(u0,v1), X(u1,v1), Y(u1,v1), 0.01);
         }
      }
      if (nn == 0) {
         draw.setColor(shade[0]);
         for (int m = 0 ; m < mm ; m++) {
            u0 = (double) m    / M;
            u1 = (double)(m+1) / M;
            draw.fillThickLine(X(u0,0), Y(u0,0), X(u1,0), Y(u1,0), 0.01);
         }
      }
   }
</figure>
<shift 12>

<color red><b>HOMEWORK, DUE BEFORE CLASS STARTS</b></color>

Implement a geometry class.  Add methods that generate a sphere, a cylinder and a cube, and optionally a torus.

Once you have these three shapes, you can model approximations to lots of different objects, such as people, molecules, cars, robots, trees, houses, chairs, and lots of other things, by creating multiple Geometry objects and using matrices to transform them.

Build a scene using models created from your shapes.  Be creative.  If you'd like, feel free to generate other primitive shapes,

For now, you can render all of your transformed shapes by drawing the edges of the faces using the g.drawLine command, just as you did for last week's assignment.

<color red><b><i>I strongly recommend you do not wait until the last minute to complete this week's assignment.  You won't be able to get it done at the last moment.
</i></b></color>

<shift 12>
<indent>
<eval>
z(u,v) {
   return 0;
}
</eval>
</indent>

<figure>
<slider tilt=0.5> tilt view </slider> 
<slider turn=0.5> turn view </slider> 
   Geometry shape;
   N = 60;
   setup() {
      Material material = new Material();
      material.setAmbient(0.2, 0.0, 0.0);
      material.setDiffuse(0.4, 0.0, 0.0);
      material.setSpecular(.5, .5, .5, 10);
      material.setDoubleSided(true);
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.2);
      shape = render.getWorld().add().mesh(N,N);
      shape.setMaterial(material);
   }
   update() {
      shape.getMatrix().identity()
                       .rotateX(-pi/2 * tilt)
                       .rotateZ(pi/2 * (turn-.5));
      vertices = shape.vertices;
      for (int i = 0 ; i <= N ; i++)
      for (int j = 0 ; j <= N ; j++) {
         int n = i + (N + 1) * j;
         u = (double)i / N;
         v = (double)j / N;
         vertices[n][2] = z(u, v);
      }
      shape.computeSurfaceNormals();
   }
</figure>
<shift 12>
<indent>

<eval>
   dr(x,y,z) {
      return 0.0;
   }
</eval>

</indent>

<figure>
<slider tilt=0.5> tilt view </slider> 
<slider turn=0.5> turn view </slider> 
   Geometry shape, template;
   setup() {

      Material material = new Material();
      material.setAmbient(0.15, 0.2, 0.12);
      material.setDiffuse(0.15, 0.2, 0.12);
      material.setSpecular(.2, .2, .2, 2);
      material.setDoubleSided(true);

      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.2);

      shape = render.getWorld().add().sphere(40);
      template = (new Geometry()).sphere(40);
      shape.setMaterial(material);
   }

   update() {
      shape.getMatrix().identity()
                       .rotateX(-pi/2 * tilt)
                       .rotateZ(pi/2 * (turn-.5));

      vt = template.vertices;
      vs = shape.vertices;
      for (int i = 0 ; i < vt.length ; i++) {
         v = vt[i];
         r = 1 + dr(v[0], v[1], v[2]);
         for (int j = 0 ; j < 3 ; j++)
            vs[i][j] = r * vt[i][j];
      }
      shape.computeSurfaceNormals();
   }
</figure>
<shift 12>
