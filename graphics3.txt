<include>
   void mouseMove(x, y) { }
   void mousePress(x, y) { }
   void mouseDrag(x, y) { }
   void mouseRelease(x, y) { }

   double A=1,B=0,C=0,D=0,
          E=0,F=1,G=0,H=0,
	  I=0,J=0,K=1,L=0,
	  M=0,N=0,O=0,P=1;

   void makeAxes() {

      red = new Material();
      red.setAmbient(0.2,0.0,0.0);
      red.setDiffuse(0.8,0.0,0.0);

      green = new Material();
      green.setAmbient(0.0,0.2,0.0);
      green.setDiffuse(0.0,0.8,0.0);

      blue = new Material();
      blue.setAmbient(0.0,0.0,0.2);
      blue.setDiffuse(0.0,0.0,0.8);

      black = new Material();
      black.setAmbient(0.0,0.0,0.0);
      black.setDiffuse(0.0,0.0,0.0);

      Geometry axes = render.getWorld().add();

      axes.setMaterial(black);

      axes.add().cube().setMaterial(red);
      axes.child(0).getMatrix().translate(.5,0,0).scale(.5,.05,.05);

      axes.add().cube().setMaterial(green);
      axes.child(1).getMatrix().translate(0,.5,0).scale(.05,.5,.05);

      axes.add().cube().setMaterial(blue);
      axes.child(2).getMatrix().translate(0,0,.5).scale(.05,.05,.5);

      axes.add().cube().setMaterial(black);
      axes.child(3).getMatrix().scale(0.1);
   }

   void makeBox() {
      box = render.getWorld().add();

      box.add().cube().getMatrix().translate(-1,-1,0).scale(.05,.05,1);
      box.add().cube().getMatrix().translate( 1,-1,0).scale(.05,.05,1);
      box.add().cube().getMatrix().translate(-1, 1,0).scale(.05,.05,1);
      box.add().cube().getMatrix().translate( 1, 1,0).scale(.05,.05,1);

      box.add().cube().getMatrix().translate(-1,0,-1).scale(.05,1,.05);
      box.add().cube().getMatrix().translate( 1,0,-1).scale(.05,1,.05);
      box.add().cube().getMatrix().translate(-1,0, 1).scale(.05,1,.05);
      box.add().cube().getMatrix().translate( 1,0, 1).scale(.05,1,.05);

      box.add().cube().getMatrix().translate(0,-1,-1).scale(1,.05,.05);
      box.add().cube().getMatrix().translate(0, 1,-1).scale(1,.05,.05);
      box.add().cube().getMatrix().translate(0,-1, 1).scale(1,.05,.05);
      box.add().cube().getMatrix().translate(0, 1, 1).scale(1,.05,.05);

      material = new Material();
      material.setAmbient(0.2,0.2,0.2);
      material.setDiffuse(0.8,0.8,0.8);
      material.setTransparency(0.7);
      box.setMaterial(material);
   }

   Color highlightColor = new Color(0,0,0,128);

   void highlight(int col, int row) {
      draw.setColor(highlightColor);
      draw.drawDisk(-.9 + .6 * col, .75 - .5 * row, .22);
   }

   boolean isShowingPerspective = true;

   void showMatrixValues() {
      computeCoefficients();

      draw.setColor(Color.black);
      draw.setFont(font);

      draw.setColor(Color.red);
      draw.drawText(round(A), -.9, .75);
      draw.setColor(Color.green);
      draw.drawText(round(B), -.3, .75);
      draw.setColor(Color.blue);
      draw.drawText(round(C),  .3, .75);
      draw.setColor(Color.black);
      draw.drawText(round(D),  .9, .75);

      draw.setColor(Color.red);
      draw.drawText(round(E), -.9, .25);
      draw.setColor(Color.green);
      draw.drawText(round(F), -.3, .25);
      draw.setColor(Color.blue);
      draw.drawText(round(G),  .3, .25);
      draw.setColor(Color.black);
      draw.drawText(round(H),  .9, .25);

      draw.setColor(Color.red);
      draw.drawText(round(I), -.9,-.25);
      draw.setColor(Color.green);
      draw.drawText(round(J), -.3,-.25);
      draw.setColor(Color.blue);
      draw.drawText(round(K),  .3,-.25);
      draw.setColor(Color.black);
      draw.drawText(round(L),  .9,-.25);

      if (! isShowingPerspective)
         return;

      draw.setColor(Color.red);
      draw.drawText(round(M), -.9,-.75);
      draw.setColor(Color.green);
      draw.drawText(round(N), -.3,-.75);
      draw.setColor(Color.blue);
      draw.drawText(round(O),  .3,-.75);
      draw.setColor(Color.black);
      draw.drawText(round(P),  .9,-.75);
   }

   void overlay() {
      showMatrixValues();
   }

   void update() {
      computeCoefficients();

      matrix = render.getWorld().getMatrix();

      matrix.set(0, 0, A);
      matrix.set(0, 1, B);
      matrix.set(0, 2, C);
      matrix.set(0, 3, D);

      matrix.set(1, 0, E);
      matrix.set(1, 1, F);
      matrix.set(1, 2, G);
      matrix.set(1, 3, H);

      matrix.set(2, 0, I);
      matrix.set(2, 1, J);
      matrix.set(2, 2, K);
      matrix.set(2, 3, L);

      matrix.set(3, 0, M);
      matrix.set(3, 1, N);
      matrix.set(3, 2, O);
      matrix.set(3, 3, P);
   }

   String round(double value) {
      String s = "" + ((int)(100 * value) / 100.);
      int i = s.indexOf('.');
      if (i < 0)
         return s + ".00";
      int n = s.length() - i;
      switch (n) {
      case  1: return s + "00";
      case  2: return s + "0";
      }
      return s;
   }

</include>
<b>These are linear transformations:</b>

A <i>cool linear transformation</i> brings straight lines to straight lines:

      x' = <b>a</b> x + <b>b</b> y + <b>c</b> z + d
      y' = <b>e</b> x + <b>f</b> y  + <b>g</b> z + h
      z' = <b>i</b> x  + <b>j</b> y  + <b>k</b> z + l


<figure>
<slider a=1.>vary a</slider>
<slider b=.5>vary b</slider>
<slider c=.5>vary c</slider>
<slider d=.5>vary d</slider>
<slider e=.5>vary e</slider>
<slider f=1.>vary f</slider>
<slider g=.5>vary g</slider>
<slider h=.5>vary h</slider>
<slider i=.5>vary i</slider>
<slider j=.5>vary j</slider>
<slider k=1.>vary k</slider>
<slider l=.5>vary l</slider>
   Font font = new Font("Sanserif", Font.PLAIN, height / 12);

   Geometry box, axes;

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.5);

      makeAxes();
      makeBox();
   }

   void computeCoefficients() {
      A = 2*a-1;
      B = 2*b-1;
      C = 2*c-1;
      D = 2*d-1;
      E = 2*e-1;
      F = 2*f-1;
      G = 2*g-1;
      H = 2*h-1;
      I = 2*i-1;
      J = 2*j-1;
      K = 2*k-1;
      L = 2*l-1;
   }

   isShowingPerspective = false;

</figure>









<b>Linear transformation with perspective:</b>

Perspective transformations also convert straight lines to straight lines:

      x' =   <b>a</b> x + <b>b</b> y  + <b>c</b> z + d
      y' =   <b>e</b> x +  <b>f</b> y + <b>g</b> z + h
      z' =    <b>i</b> x +  <b>j</b> y + <b>k</b> z + l
      w' = <b>m</b> x + <b>n</b> y + <b>o</b> z + p

result:  (x' / w', y' / w', z' / w')
<figure>
<slider m=.5>vary m</slider>
<slider n=.5>vary n</slider>
<slider o=.5>vary o</slider>
<slider p=1>vary p</slider>

   Font font = new Font("Sanserif", Font.PLAIN, height / 12);

   Geometry box, axes;

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.5);

      makeAxes();
      makeBox();
   }

   void computeCoefficients() {
      M = 2*m-1;
      N = 2*n-1;
      O = 2*o-1;
      P = 2*p-1;
   }

</figure>
As w goes to zero, the point can go to infinity.









<b>THE DIFFERENT PARTS OF THE MATRIX</b>

<b>Translation</b>

Let's just vary the rightmost column.


<figure>
<slider d=.5>translate in x</slider>
<slider h=.5>translate in y</slider>
<slider l=.5>translate in z</slider>
   Font font = new Font("Sanserif", Font.PLAIN, height / 12);

   Geometry box, axes;

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.5);

      makeAxes();
      makeBox();
   }

   void computeCoefficients() {
      D = 4 * d - 2;
      H = 4 * h - 2;
      L = 4 * l - 2;
   }

   void overlay() {
      showMatrixValues();
      highlight(3,0);
      highlight(3,1);
      highlight(3,2);
   }

</figure>
















<b>Rotation about the X axis</b>



<figure>
<slider rot=.5>rotate about x</slider>
   Font font = new Font("Sanserif", Font.PLAIN, height / 12);

   Geometry box, axes;

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.5);

      makeAxes();
      makeBox();
   }

   void computeCoefficients() {
      double theta = (2 * rot - 1) * Math.PI;
      double cos = Math.cos(theta);
      double sin = Math.sin(theta);

      F =  cos;
      G = -sin;
      J =  sin;
      K =  cos;
   }

   void overlay() {
      showMatrixValues();
      highlight(1,1);
      highlight(1,2);
      highlight(2,1);
      highlight(2,2);
   }

</figure>















<b>Rotation about the Y axis</b>



<figure>
<slider rot=.5>rotate about y</slider>
   Font font = new Font("Sanserif", Font.PLAIN, height / 12);

   Geometry box, axes;

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.5);

      makeAxes();
      makeBox();
   }

   void computeCoefficients() {
      double theta = (2 * rot - 1) * Math.PI;
      double cos = Math.cos(theta);
      double sin = Math.sin(theta);

      K =  cos;
      I = -sin;
      C =  sin;
      A =  cos;
   }

   void overlay() {
      showMatrixValues();
      highlight(0,0);
      highlight(0,2);
      highlight(2,0);
      highlight(2,2);
   }

</figure>














<b>Rotation about the Z axis</b>



<figure>
<slider rot=.5>rotate about z</slider>
   Font font = new Font("Sanserif", Font.PLAIN, height / 12);

   Geometry box, axes;

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.5);

      makeAxes();
      makeBox();
   }

   void computeCoefficients() {
      double theta = (2 * rot - 1) * Math.PI;
      double cos = Math.cos(theta);
      double sin = Math.sin(theta);

      A =  cos;
      B = -sin;
      E =  sin;
      F =  cos;
   }

   void overlay() {
      showMatrixValues();
      highlight(0,0);
      highlight(0,1);
      highlight(1,0);
      highlight(1,1);
   }

</figure>
















<b>Scale in X, Y, Z</b>



<figure>
<slider sx=.75>scale in x</slider>
<slider sy=.75>scale in y</slider>
<slider sz=.75>scale in z</slider>
   Font font = new Font("Sanserif", Font.PLAIN, height / 12);

   Geometry box, axes;

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.5);

      makeAxes();
      makeBox();
   }

   void computeCoefficients() {
      A = 4 * sx - 2;
      F = 4 * sy - 2;
      K = 4 * sz - 2;
   }

   void overlay() {
      showMatrixValues();
      highlight(0,0);
      highlight(1,1);
      highlight(2,2);
   }

</figure>










<b>Primitive operations:</b>

All of this math can be implemented as a set of methods on an object of type <i>Matrix</i>:

     void identity();
     void translate(double x, double y, double z);
     void rotateX(double radians);
     void rotateY(double radians);
     void rotateZ(double radians);
     void scale(double x, double y, double z);


















<b>Chaining together sequences of primitive transformations</b>

We can chain these primitives together for more complex transformations.

For example:

     Matrix m = new Matrix();
     m.identity();
     m.translate(1.0, 0.0, 0.0);
     m.rotateY(Math.PI / 4);
     m.scale(0.2, 0.2, 2.0);

















<b>Matrix multiplication</b>

We concatenate transformations by matrix multiplication.

To multiply two matrices, we take every combination of rows in the leftmost matrix and columns in the rightmost matrix:

<figure name=matrixmultiply>
<button mode=0> C = A x B | rows/cols </button>
   Font font = new Font("Sanserif", Font.PLAIN, height / 6);

   double fx = -100, fy = -100;

   void mouseMove(int x, int y) {
      fx = draw.fx(x);
      fy = draw.fy(y);
   }

   draw() {
      double r = 0.08;

      switch (mode) {
      case 0:
         draw.setColor(Color.black);
         draw.setFont(font);
         draw.drawText("C", -1, 0);
         draw.drawText("A",  0, 0);
         draw.drawText("B",  1, 0);

         draw.drawBox(-1, 0, .32);
         draw.drawBox( 0, 0, .32);
         draw.drawBox( 1, 0, .32);
         break;

      case 1:
         draw.setColor(Color.cyan);
         for (int i = 0 ; i < 4 ; i++)
         for (int j = 0 ; j < 4 ; j++) {
            double x = 2 * r * (i - 1.5);
            double y = 2 * r * (j - 1.5);
	    if (fx >= x-r && fx < x+r)
               draw.fillBox(1 + x, y, r);
	    if (fy >= y-r && fy < y+r)
               draw.fillBox(x, y, r);
	    if (fx >= x-r && fx < x+r && fy>=y-r && fy<y+r)
               draw.fillBox(-1 + x, y, r);
         }

         draw.setColor(Color.black);
         for (int i = 0 ; i < 4 ; i++)
         for (int j = 0 ; j < 4 ; j++) {
            double x = 2 * r * (i - 1.5);
            double y = 2 * r * (j - 1.5);
            draw.setColor(Color.black);
            draw.drawBox(-1.0 + x, y, r);
            draw.drawBox(       x, y, r);
            draw.drawBox( 1.0 + x, y, r);
         }
         break;
      }

      draw.setColor(Color.black);
      draw.fillThickLine(.5-r,r,.5+r,-r,.02);
      draw.fillThickLine(.5+r,r,.5-r,-r,.02);
      draw.fillThickLine(-.5-r,r/2,-.5+r,r/2,.02);
      draw.fillThickLine(-.5+r,-r/2,-.5-r,-r/2,.02);
   }
   
</figure>












<b>Chaining together primitive operations:</b>

What does it mean, geometrically, to chain a sequence of operations?

     m.identity();
     m.translate(1.0, 0.0, 0.0);
     m.rotateY(Math.PI / 4);
     m.scale(0.2, 0.2, 2.0);

<figure>
<button mode=0> identity | translate | rotate | scale </button>
   Geometry box;

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.5);

      box = render.getWorld().add().cube();

      material = new Material();
      material.setAmbient(.2, 0, 0);
      material.setDiffuse(.8, 0, 0);
      box.setMaterial(material);
   }

   void update() {
      matrix = box.getMatrix();
      matrix.identity();
      switch (mode) {
      case 1:
         matrix.translate(mode(1), 0, 0);
         break;
      case 2:
         matrix.translate(1.0, 0, 0);
	 matrix.rotateY(Math.PI / 4 * mode(2));
         break;
      case 3:
         matrix.translate(1.0, 0, 0);
	 matrix.rotateY(Math.PI / 4);
	 matrix.scale(1 - 0.8 * mode(3), 1 - 0.8 * mode(3), 1 + mode(3));
         break;
      }
   }
</figure>









<b>What is the right order to chain matrix multiplication?</b>

How do we chain together many matrix multiplies, to get a single composite matrix?

     m.identity();
     m.translate(1.0, 0.0, 0.0);
     m.rotateY(Math.PI / 4);
     m.scale(0.2, 0.2, 2.0);
<figure>
<button mode=0> compute matrix | compute point | one matrix </button>
   Font font = new Font("Sanserif", Font.PLAIN, height / 10);
   Font smallFont = new Font("Sanserif", Font.PLAIN, height / 12);

   Color highlightColor = new Color(255,0,0,64);
   double fx = -100, fy = -100;

   void mouseMove(int x, int y) {
      fx = draw.fx(x);
      fy = draw.fy(y);
   }

   double xLast = 0;

   draw() {
      draw.setColor(Color.black);
      if (mode == 0)
         drawMatrix("", "" , -1.1, 0, "");
      else {
         xLast = -100;
         drawVector(-1.0, 0);
      }
      drawMatrix("I", "" , -0.6, 0, "=");
      drawMatrix("T", "" , -0.1, 0, "x");
      drawMatrix("R", "y",  0.4, 0, "x");
      drawMatrix("S", "" ,  0.9, 0, "x");
      if (mode == 2) {
         double x0 = -0.6 - .18;
         double x1 = xLast + .18;
         double x = (x0 + x1) / 2;
         double r = x1 - x;
         draw.setColor(highlightColor);
         draw.fillBox(x, 0, r, .18);
         draw.setColor(Color.black);
         draw.drawBox(x, 0, r, .18);
         draw.setFont(smallFont);
         draw.drawText("=", x0 - 0.06, 0);
      }
      if (mode > 0)
         drawVector(xLast + .3, 0);
   }

   drawVector(double x, double y) {
      draw.setColor(Color.cyan);
      draw.fillBox(x, y, .09, .18);
      draw.setColor(Color.black);
      draw.drawBox(x, y, .09, .18);
   }

   drawMatrix(String label, String subscript, double x, double y, String op) {
      if (fy <= y + .2 && fy >= y - .2 && fx <= x - .2)
         return;
      xLast = x;
      if (mode == 2)
         return;
      if (fy <= y + .2 && fy >= y - .2) {
         draw.setColor(highlightColor);
         draw.fillBox(x, y, .18);
      }
      draw.setColor(Color.black);
      if (subscript.length() == 0) {
         draw.setFont(font);
         draw.drawText(label, x, y);
      }
      else {
         draw.setFont(font);
         draw.drawText(label, x - .06, y + .03);
         draw.setFont(smallFont);
         draw.drawText(subscript, x + .06, y - .05);
      }
      draw.drawBox(x, y, .18);
      draw.setFont(smallFont);
      draw.drawText(op, x - .24, y);
   }
</figure>

















<b>Matrix multiplication is not commutative!</b>

Consider <b>Rx Ry</b> versus <b>Ry Rx</b>:

<figure name=noncommutative>
<button rot1=0> Rx Ry | first Rx | then Ry </button>
<button rot2=0> Ry Rx | first Ry | then Rx </button>

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.25);

      makeAxes();
   }

   void update() {
      matrix = render.getWorld().getMatrix();
      matrix.identity();

      switch (rot1) {
      case 1:
         matrix.rotateX(Math.PI / 2 * rot1(1));
	 break;
      case 2:
         matrix.rotateX(Math.PI / 2);
         matrix.rotateY(Math.PI / 2 * rot1(2));
	 break;
      }

      switch (rot2) {
      case 1:
         matrix.rotateY(Math.PI / 2 * rot2(1));
	 break;
      case 2:
         matrix.rotateY(Math.PI / 2);
         matrix.rotateX(Math.PI / 2 * rot2(2));
	 break;
      }
   }

</figure>

























<b>Matrix multiplication is not commutative!</b>

Consider <b>Rz Ty</b> versus <b>Ty Rz</b>:

<figure name=noncommutative>
<button rot1=0> Rz Ty | first Rz | then Ty </button>
<button rot2=0> Ty Rz | first Ty | then Rz </button>

   void setup() {
      render.addLight( 1, 1, 1, 1, 1, 1);
      render.addLight(-1,-1,-1, 1, 1, 1);
      render.setFOV(0.43);

      makeAxes();
   }

   void update() {
      matrix = render.getWorld().getMatrix();
      matrix.identity();

      switch (rot1) {
      case 1:
         matrix.rotateZ(Math.PI / 2 * rot1(1));
	 break;
      case 2:
         matrix.rotateZ(Math.PI / 2);
         matrix.translate(0, rot1(2), 0);
	 break;
      }

      switch (rot2) {
      case 1:
         matrix.translate(0, rot2(1), 0);
	 break;
      case 2:
         matrix.translate(0, 1, 0);
         matrix.rotateZ(Math.PI / 2 * rot2(2));
	 break;
      }
   }

</figure>







